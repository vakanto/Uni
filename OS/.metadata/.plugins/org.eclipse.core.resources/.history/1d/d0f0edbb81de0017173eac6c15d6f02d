import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.Semaphore;

public class Semaphor_Baker
{
	private static Semaphore semaphor = new Semaphore(3, true);
	
	private static Thread Baker1;
	private static Thread Baker2;
	private static Thread Consumer;
	
	private static Queue <Kuchen> auslage = new LinkedList<Kuchen>();
	
	public static void main(String[] args)
	{
		Baker1 = new Thread()
		{
			 @Override
			 public void run()
			 {
				while(true)
				{
					try
					{
						while(auslage.size()>=5)
						{
							
						}
						
						Kuchen kuchen = new Kuchen();
						semaphor.acquire();
						
						auslage.add(kuchen);
						System.out.println("Kuchen von Baecker 1 gebacken und in Auslage :-)");
						
						
						Thread.sleep(2000);
						
						
					} catch (InterruptedException e)
					{
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
				}								 
			 }
			 
			 private void bake()
			 {
				 
			 }
		};
		
		Baker2 = new Thread()
		{
			 @Override
			 public void run()
			 {
				 while(true)
				{
						
						
				}		
				 
				 
			 }
			
			
		};
		
		Consumer = new Thread()
		{
			 @Override
			 public void run()
			 {
				while(true)
				{
						
						
				}		
			 }
			
			
		};

	}
	
	static class Kuchen
	{
		
	}

}
